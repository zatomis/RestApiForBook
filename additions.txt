Краткое описание структуры проекта.
Обязательно: Описание принятых решений по структуре БД.
Обязательно: Объяснение, как реализована бизнес-логика (особенно пункты 4.1, 4.2, 4.3). С какими сложностями столкнулись и как их решили?
Обязательно (Новое): Краткое описание реализации аутентификации: как генерируются и проверяются токены, какие эндпоинты защищены и почему. Какие библиотеки использовались и почему.
Творческая часть: Предложите одну дополнительную фичу, которую можно было бы добавить в этот API, и кратко опишите, как бы вы ее реализовывали (на уровне идеи, без кода).

Структура БД была выбрана следующая:
Книги. Основные данные для учета книг (см. условия задание):
Читатели. Основные данные для читателей (см. условия задание):
Выданные книги. Связи между книгами и читателями:
Каждая книга может быть взята читателем не более 3-х книг одновременно.
Каждая книга имеет количество экземпляров, количество которых учитывется при выдаче-возврате

Реализия бизнес-логики (особенно пункты 4.1, 4.2, 4.3). С какими сложностями столкнулись и как их решили?
Перед тем как выдать книгу, проверяется наличие доступных экземпляров книги и наличие читателя.
Если количество экземпляров книги 0, то книга не выдается.
Проверяется если ли в таблице выданных экземпляров книги, которые уже выданы читателю и не возвращены.
Они не должны превышать 3-х.
Если всё успешно - уменьшается кол-во копий книги на 1.
В таблицу выданных экземпляров добавляется новая запись с данными о книге и читателе, дате выдачи.
При возврате книги также проверяется данные об экземпляре и читателе,
Ищем запись в таблице выданных экземпляров книги, которые уже выданы читателю и не возвращены (дата возврата).
При возврате количество экземпляров увеличивается на 1 и проставляем дату возврата.

Если говорить о сложностях, которые пришлось решать, я бы отметил следующее:
Т.к. по заданию, а именно, в разделе по работе с книгами необходимо было реализовать CRUD операции.
Эти опреации предполагают Создание. Чтение. Обновление. Удаление.
Т.к. по заданию и по логике необходимо уменьшать и увеличивать кол-во экземпляров книг,
то я добавил END point частичное изменение (PATCH) данных о книге (кол-во), что помогло в решении

Из фич которые можно было бы реализовать - списание книг. Т.е. необходимо убрать все книги из библиотеки (по id),а
также все записи об истории их выдачи. Такое действие может быть полезно при списании книги из-за ...
вариантов несколько
- сам автор книги решил подарить все свои экземпляры читателям 8-)
- книга не подходит для чтения по ... моментам и все экземпляры необходимо изъять и записи о существовании необходимо удалить
- книга(и) экземпляры просто устарели от времени и не нужны в библиотеке или заменяются на новый выпуск

Регистрация и аутотификация.
Регистрация и аутентификация реализованы с использованием JWT.
При регистрации пользователь вводит почту и пароль, далее поиск - есть ли такой пользователь.
Если все норм-хешируем пароль и сохраняем в БД.
Далее аутотификация пользователя принимает почту и пароль, проверяем их и получаем токен доступа, который используется для доступа к защищенным эндпоинтам.
